@page "/sudoku"
@inherits SudokuPage
@using Sudoku.Components

<MudAppBar Class="pl-0">
    <MudIconButton Class="pl-0 ml-0"
                   Icon="@Icons.Filled.ArrowBackIosNew"
                   aria-label="back"
                   Color=Color.Inherit
                   Size=MudBlazor.Size.Large
                   OnClick="NavigateToHome">
    </MudIconButton>
    @*<MudContainer MaxWidth=MaxWidth.ExtraLarge>*@
        <MudText Typo="Typo.h5" Align="Align.Center">@(TimerValueString)</MudText>
        @if (GameInPause)
        {
            <MudIconButton Icon="@Icons.Filled.PlayCircleOutline"
                       Color=Color.Inherit
                       aria-label="play"
                       Size=MudBlazor.Size.Large
                       OnClick="NavigateToHome"></MudIconButton>
        }
        else
        {
            <MudIconButton Icon="@Icons.Filled.PauseCircleOutline"
                       Color=Color.Inherit
                       aria-label="pause"
                       Size=MudBlazor.Size.Large
                       OnClick="NavigateToHome"></MudIconButton>
        }

        <MudIconButton Icon="@Icons.Filled.Settings"
                       Color=Color.Inherit
                       aria-label="setting"
                       Size=MudBlazor.Size.Large
                       OnClick="NavigateToConfiguration">
        </MudIconButton>
    @*</MudContainer>*@

</MudAppBar>

<div id="game"
     class=@(GameInPause ? "displayNone" : "displayYes")>

    @if (Board is not null)
    {
        <SudokuBoard id="sudokuboard"
                 board=@(Board)
                 selectedCell=@(CellSelected)
                 lastCellOfTheGame=@(LastCellOfTheGame)
                 @*incorrectCells=@(IncorrectCells)*@
                 solvedRow=@(RowSolved)
                 solvedCol=@(ColSolved)
                 solvedBlock=@(BlockSolved)
                 gameOnGoing=@(GameOnGoing)
                 solutionsByRules=@(SolutionsByRules)
                 wizardConfiguration=@(WizardConfiguration)
                 OnCellSelection="(cellNumberCustomEvent) => dispatchCellSelection(cellNumberCustomEvent)">
        </SudokuBoard>

        <SudokuKeyboard id="keyboard"
                    class=@(GameOnGoing ? "displayYes" : "displayNone")
                    OnClearClicked="ClearCellClicked"
                    OnUndoClicked="UndoClicked"
                    OnNumberClicked="(keyCustomeEvent) => NumberTyped(keyCustomeEvent)"
                    OnDraftNumberClicked="(draftNumberClicked) => DraftNumberTyped(draftNumberClicked)"
                    remainingNumbers=@(RemainingNumbers)
                    hideClearKey=@(ShouldHideClearKey())
                    hideUndoKey=@(!GameOnGoing)>
        </SudokuKeyboard>
    }
    <div id="newGame"
         class=@(GameOnGoing ? "displayNone" : "displayYes")>
        <p>Good game! Play again?</p>
        <AccButton id="newGame"
                   stylesuccess
                   OnClickCallback="NavigateToNewboard">
            Newboard
        </AccButton>
    </div>
</div>
<div id="bigplay"
     class=@(GameInPause ? "displayYes" : "displayNone")
     @onclick="ResumeGame">
    <img id="playimg" src="assets/source_icons_play-outline.svg" />
</div>
